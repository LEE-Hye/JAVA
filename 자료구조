[자료구조]
- 데이터를 어떤 방식으로 저장할건지에 대한 구조(프로세스-업무)
① List ② Stack ③ Queue ④ Tree ⑤ Map

리스트 스택 큐는 선형 구조
트리는 단계별로 저장
==================================================
[List]
: 번호 부여하고 싶을 때, 우선순위를 주고 싶을 때 사용
- 단점 : 데이터를 추가/삭제 할 때 마다 데이터 복사가 일어나서 메모리 소모가 심하고 느림
- 장점 : 인덱스가 생겨서 번호를 부여할 수 있어 정렬이나 순차적으로 하는 작업에 적합

- List 의 단점을 보완 하기 위한 것이 Linked List
---------------------------------------------------
스택과 큐는 프로세스 업무를 저장할 때 사용함
- 프로세스 업무저장 - thread

(A가 끝나야 B를 시작할 수 있음 : 직렬처리)

★
thread
- 프로세스를 병렬처리 할 수 있게 하는 것이 thread
-> A, B 동시에 시작할 수 있음 : 병렬처리
(이해하기 쉬운게 두더지 게임. 이해하기에 만들어봐도 나쁘지 않음)
ex) 크롬에서 파일 다운받으면서 웹 서핑 하는 것
★

운영체제가 프로세스 작업을 처리하는데 스택 방식으로 업무 처리할 때가 있고 큐 방식으로 업무를 처리할 때가 있음
--------------------------------------------------
[Stack]
: First In Last Out

스택 예) 뒤로가기

pop(최상위 삭제), push(추가), clear(모두삭제), peek(확인)
-------------------------------------------------
[Queue]
: First In First Out

큐 예) 데이터 통신할 때(유튜브 회색바가 내가 보고 있는 곳부터 생김)
-----------------------------------------------

[Tree]
: 파일 저장(디렉토리)할 때 사용
- 파일 저장구조가 트리구조
- 구조적으로 생겨서 리스트보다는 추가,삭제,검색하는데 빠름
- 이진트리
- 단계별로 저장
-----------------------------------------------

[Map]
- key - value : 키값으로 벨류값을 꺼냄
- ★ key값 중복 허용 X
  -> set이라는 자료구조는 순서가 없고 중복을 허용하지 않는 데이터 (key값이 set으로 되어있음)
- 이미 있는 값을 추가하면 수정임

- Iterator 라는 애가 있어서 얘를 사용하면 모든 키 값을 다 가져올 수 있음
  -> Map에 있는 모든 value를 가져올 수 있음(대신 순서는 없음)

- 속도는 빠른데 순서가 없어서 정렬할 수 없음

ex) HashMap
- get(key); : 꺼내기
- put(key, value); : 삽입
- remove(key); : 삭제
- clear(); : 모두삭제

============================================
정렬(sort) 알고리즘
① Bubble Sort - 오름차순(작은 수가 왼쪽)
- 바로 옆에 있는 데이터끼리 비교
- 뒤에서부터 정렬이 완료됨
- 전체적으로는 length -1 회 돎
  -> 1회 돌 때 마다 length - i바퀴 만큼 돎


② Selection Sort
