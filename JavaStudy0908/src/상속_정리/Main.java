package 상속_정리;

public class Main {

	public static void main(String[] args) {

		// 1. 상속을 받으면 상위 클래스의 기능을 물려받는다.
//		Super store1 = new Super();
//		store1.coffee();	=> 추상메소드가 되어서 이제 객체생성할 필요 없음(5번 내용)
		
		Sub store2 = new Sub();
		store2.coffee();
		store2.waffle();

		// 2. 하위 클래스 타입의 객체는 상위 클래스 타입으로 형변환이 가능하다.
		// => 업캐스팅(묵시적 형변환/ 자동 형변환)
		// sub가 super를 상속 받아 그쪽 계열로 볼 수 있다.
		Super store3 = new Sub();
		// 가게 주인 : Super, 일 하는 사람 : Sub
		// 와플 시켜먹을 때 원래 일하는 사람은 sub인데 super에 얹혀 살고 있으니 다시 불러다가 와플 시켜먹어야해
		// 업캐스팅 되어 있는 상태인데 하위 클래스에 있는 거 부르려면 다운 캐스팅 해줘야 해
		// - 상위 클래스 타입으로 업캐스팅 된 객체는 다시 하위 클래스 타입으로 형변환이 가능하다
		// => 대신 명시적 형변환(강제 형변환) 해야 함!
		((Sub)store3).waffle();
		
		
		// 3. 메소드 오버라이딩(재정의) : 상위 클래스에 설계된 메소드를 하위 클래스에서 재정의
		// - 업캐스팅 되어있는 상태에서 오버라이딩된 메소드를 호출하면 하위의 메소드가 실행
		// -> 하위에 있는 메소드가 좀 더 구체화 되어 있어서
		store3.coffee();
		
		// 4. 메소드 오버로딩(중복정의) : 한 클래스 내에서 메소드의 이름을 동일하게 정의하는 것
		// - 매개변수의 타입이나 개수를 다르게! (리턴 타입은 상관 없음)
		
		
		// 5. 추상 메소드, 추상 클래스
		// - 모든 하위 클래스에서 오버라이딩이 일어남 => 상위 클래스에는 구체적인 설계를 할 필요가 없음
		// 	-> 대신 모든 하위클래스는 해당 메소드를 오버라이딩 해야 함 => 구현의 강제성
		// - 추상 클래스는 객체 생성 불가능 => 미완성이니깐
		// - 업캐스팅 용도로만 사용 => 규격
		// - abstract을 public 바로 뒤에 적어줌
		
//		Super store4 = new Sub2();
//		store4.coffee();
		
		
		// 6. 인터페이스
		// - 추상클래스 = 추상메소드 + 일반메소드
		// - but! 상호명만 제공한다? => All추상
		// - 오로지 추상 메소드만 가질 수 있음
		// - 상속 키워드 : extends(확장하다)
		// - 구현 키워드 : implements(구현하다)
		// - 상위 클래스에서 abstract class를 지우고 interface를 입력해준 후
		// - 하위 클래스에서 extends대신에 implements를 입력
		
		
		// 7. 상속 관계에서 생성자
		// - 생성자 메소드란?
		//   -> 일반적인 메소드는 호출해야 실행됨. 하지만 생성자 메소드는 객체를 생성할 때 함께 딱 한 번 실행됨
		// - 생김새 특징 : 메소드의 이름이 클래스의 이름과 같고, 리턴 타입을 명시하지 않는다.
		// - 객체를 생성할 때 함께 호출되는 특징때문에 주로 필드(클래스 변수)를 초기화(메모리 할당 후 최초로 값을 지정) 할 때 사용
		
		System.out.println();
		System.out.println("===========생성자 연습 ===========");
		Sub s1 = new Sub();
		Sub s2 = new Sub();
		
		// - 생성자가 실행될 때 상위 클래스의 생성자를 먼저 실행한다. 
		// - 상위 클래스에 매개변수가 있는 생성자가 있다면 하위 클래스에서 반드시 호출해야함
		//   => 상위 클래스의 생성자를 호출하는 명령어는 첫줄 생성자에서만 가능
		//   => 하위 클래스가 반드시 생성자를 설계해야 됨
		
		
	}
}